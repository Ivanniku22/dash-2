{
  "version": 3,
  "sources": ["../../node_modules/property-expr/index.js", "../../node_modules/toposort/index.js"],
  "sourcesContent": ["/**\n * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>\n */\n'use strict'\n\nfunction Cache(maxSize) {\n  this._maxSize = maxSize\n  this.clear()\n}\nCache.prototype.clear = function () {\n  this._size = 0\n  this._values = Object.create(null)\n}\nCache.prototype.get = function (key) {\n  return this._values[key]\n}\nCache.prototype.set = function (key, value) {\n  this._size >= this._maxSize && this.clear()\n  if (!(key in this._values)) this._size++\n\n  return (this._values[key] = value)\n}\n\nvar SPLIT_REGEX = /[^.^\\]^[]+|(?=\\[\\]|\\.\\.)/g,\n  DIGIT_REGEX = /^\\d+$/,\n  LEAD_DIGIT_REGEX = /^\\d/,\n  SPEC_CHAR_REGEX = /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g,\n  CLEAN_QUOTES_REGEX = /^\\s*(['\"]?)(.*?)(\\1)\\s*$/,\n  MAX_CACHE_SIZE = 512\n\nvar pathCache = new Cache(MAX_CACHE_SIZE),\n  setCache = new Cache(MAX_CACHE_SIZE),\n  getCache = new Cache(MAX_CACHE_SIZE)\n\nvar config\n\nmodule.exports = {\n  Cache: Cache,\n\n  split: split,\n\n  normalizePath: normalizePath,\n\n  setter: function (path) {\n    var parts = normalizePath(path)\n\n    return (\n      setCache.get(path) ||\n      setCache.set(path, function setter(obj, value) {\n        var index = 0\n        var len = parts.length\n        var data = obj\n\n        while (index < len - 1) {\n          var part = parts[index]\n          if (\n            part === '__proto__' ||\n            part === 'constructor' ||\n            part === 'prototype'\n          ) {\n            return obj\n          }\n\n          data = data[parts[index++]]\n        }\n        data[parts[index]] = value\n      })\n    )\n  },\n\n  getter: function (path, safe) {\n    var parts = normalizePath(path)\n    return (\n      getCache.get(path) ||\n      getCache.set(path, function getter(data) {\n        var index = 0,\n          len = parts.length\n        while (index < len) {\n          if (data != null || !safe) data = data[parts[index++]]\n          else return\n        }\n        return data\n      })\n    )\n  },\n\n  join: function (segments) {\n    return segments.reduce(function (path, part) {\n      return (\n        path +\n        (isQuoted(part) || DIGIT_REGEX.test(part)\n          ? '[' + part + ']'\n          : (path ? '.' : '') + part)\n      )\n    }, '')\n  },\n\n  forEach: function (path, cb, thisArg) {\n    forEach(Array.isArray(path) ? path : split(path), cb, thisArg)\n  },\n}\n\nfunction normalizePath(path) {\n  return (\n    pathCache.get(path) ||\n    pathCache.set(\n      path,\n      split(path).map(function (part) {\n        return part.replace(CLEAN_QUOTES_REGEX, '$2')\n      })\n    )\n  )\n}\n\nfunction split(path) {\n  return path.match(SPLIT_REGEX) || ['']\n}\n\nfunction forEach(parts, iter, thisArg) {\n  var len = parts.length,\n    part,\n    idx,\n    isArray,\n    isBracket\n\n  for (idx = 0; idx < len; idx++) {\n    part = parts[idx]\n\n    if (part) {\n      if (shouldBeQuoted(part)) {\n        part = '\"' + part + '\"'\n      }\n\n      isBracket = isQuoted(part)\n      isArray = !isBracket && /^\\d+$/.test(part)\n\n      iter.call(thisArg, part, isBracket, isArray, idx, parts)\n    }\n  }\n}\n\nfunction isQuoted(str) {\n  return (\n    typeof str === 'string' && str && [\"'\", '\"'].indexOf(str.charAt(0)) !== -1\n  )\n}\n\nfunction hasLeadingNumber(part) {\n  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX)\n}\n\nfunction hasSpecialChars(part) {\n  return SPEC_CHAR_REGEX.test(part)\n}\n\nfunction shouldBeQuoted(part) {\n  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part))\n}\n", "\n/**\n * Topological sorting function\n *\n * @param {Array} edges\n * @returns {Array}\n */\n\nmodule.exports = function(edges) {\n  return toposort(uniqueNodes(edges), edges)\n}\n\nmodule.exports.array = toposort\n\nfunction toposort(nodes, edges) {\n  var cursor = nodes.length\n    , sorted = new Array(cursor)\n    , visited = {}\n    , i = cursor\n    // Better data structures make algorithm much faster.\n    , outgoingEdges = makeOutgoingEdges(edges)\n    , nodesHash = makeNodesHash(nodes)\n\n  // check for unknown nodes\n  edges.forEach(function(edge) {\n    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {\n      throw new Error('Unknown node. There is an unknown node in the supplied edges.')\n    }\n  })\n\n  while (i--) {\n    if (!visited[i]) visit(nodes[i], i, new Set())\n  }\n\n  return sorted\n\n  function visit(node, i, predecessors) {\n    if(predecessors.has(node)) {\n      var nodeRep\n      try {\n        nodeRep = \", node was:\" + JSON.stringify(node)\n      } catch(e) {\n        nodeRep = \"\"\n      }\n      throw new Error('Cyclic dependency' + nodeRep)\n    }\n\n    if (!nodesHash.has(node)) {\n      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))\n    }\n\n    if (visited[i]) return;\n    visited[i] = true\n\n    var outgoing = outgoingEdges.get(node) || new Set()\n    outgoing = Array.from(outgoing)\n\n    if (i = outgoing.length) {\n      predecessors.add(node)\n      do {\n        var child = outgoing[--i]\n        visit(child, nodesHash.get(child), predecessors)\n      } while (i)\n      predecessors.delete(node)\n    }\n\n    sorted[--cursor] = node\n  }\n}\n\nfunction uniqueNodes(arr){\n  var res = new Set()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i]\n    res.add(edge[0])\n    res.add(edge[1])\n  }\n  return Array.from(res)\n}\n\nfunction makeOutgoingEdges(arr){\n  var edges = new Map()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i]\n    if (!edges.has(edge[0])) edges.set(edge[0], new Set())\n    if (!edges.has(edge[1])) edges.set(edge[1], new Set())\n    edges.get(edge[0]).add(edge[1])\n  }\n  return edges\n}\n\nfunction makeNodesHash(arr){\n  var res = new Map()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    res.set(arr[i], i)\n  }\n  return res\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
